from telegram import InlineKeyboardButton
from models import User, Region
from telegram.ext import ConversationHandler
from functools import wraps
import strings as s


def cities_keyboard():
    return [
        [InlineKeyboardButton(
            "–ú–∏–Ω—Å–∫", callback_data='select_city:–ú–∏–Ω—Å–∫')],
        [InlineKeyboardButton(
            "–ë—Ä–µ—Å—Ç", callback_data='select_city:–ë—Ä–µ—Å—Ç')],
        [InlineKeyboardButton(
            "–ì—Ä–æ–¥–Ω–æ", callback_data='select_city:–ì—Ä–æ–¥–Ω–æ')],
        [InlineKeyboardButton(
            "–í–∏—Ç–µ–±—Å–∫", callback_data='select_city:–í–∏—Ç–µ–±—Å–∫')],
        [InlineKeyboardButton(
            "–ú–æ–≥–∏–ª—ë–≤", callback_data='select_city:–ú–æ–≥–∏–ª—ë–≤')],
        [InlineKeyboardButton(
            "–ì–æ–º–µ–ª—å", callback_data='select_city:–ì–æ–º–µ–ª—å')],
        [InlineKeyboardButton(
            "–ì–æ—Ä–æ–¥–∞ –ë–µ–ª–∞—Ä—É—Å–∏ >>", callback_data='select_city_2')],
        [InlineKeyboardButton(
            "–î—Ä—É–≥–æ–π", callback_data='select_city:–î—Ä—É–≥–æ–π')],
    ]


def regions_keyboard():
    regions = Region.all()
    keyboard = [[InlineKeyboardButton(r.name, callback_data='select_city_3:%s' % r.name)]
                for r in regions]
    keyboard += [[InlineKeyboardButton("<< –ù–∞–∑–∞–¥",
                                       callback_data='select_city_1')]]
    return keyboard


def region_cities_keyboard(region: Region):
    keyboard = [[InlineKeyboardButton(c.name, callback_data='select_city:%s' % c.name)]
                for c in region.cities]
    keyboard += [[InlineKeyboardButton("<< –ù–∞–∑–∞–¥",
                                       callback_data='select_city_2')]]
    return keyboard


numbers_1_10 = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£',
                '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']


def user_registered(func):
    @wraps(func)
    def wrapped(update, context, *args, **kwargs):
        tg_id = update.effective_user.id
        user = User.by(tg_id=tg_id)
        if not user:
            update.effective_user.send_message(s.user_is_not_registered_error)
            return ConversationHandler.END
        return func(update, context, *args, **kwargs)
    return wrapped


def user_allowed(func):
    @wraps(func)
    def wrapped(update, context, *args, **kwargs):
        tg_id = update.effective_user.id
        user = User.by(tg_id=tg_id)
        if user:
            if user.is_blocked:
                update.effective_user.send_message(s.action_is_blocked_error)
                return ConversationHandler.END
        else:
            update.effective_user.send_message(s.user_is_not_registered_error)
            return ConversationHandler.END
        return func(update, context, *args, **kwargs)
    return wrapped
